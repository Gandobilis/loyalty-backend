services:
  backend:
    build: .
    container_name: loyalty-backend
    ports:
      - "8080:8080"
    depends_on:
      # The backend will now wait for both services to be healthy before starting.
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15
    container_name: loyalty-db
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: loyalty-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      # This command checks if the Redis server is responsive.
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# --- VOLUMES UPDATED ---
volumes:
  postgres_data:
  redis_data: