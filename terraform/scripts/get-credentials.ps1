###############################################################################
# Get Terraform Output Credentials (Windows)
#
# This script retrieves AWS credentials and configuration from Terraform
# outputs and displays them in a format ready to copy to your .env file.
#
# Usage:
#   .\scripts\get-credentials.ps1 [environment]
#
# Examples:
#   .\scripts\get-credentials.ps1 dev
#   .\scripts\get-credentials.ps1 staging
###############################################################################

param(
    [Parameter(Position=0)]
    [ValidateSet('dev', 'staging', 'prod')]
    [string]$Environment = 'dev'
)

# Stop on errors
$ErrorActionPreference = "Stop"

# Functions
function Write-Header {
    param([string]$Message)
    Write-Host "`n================================================" -ForegroundColor Blue
    Write-Host $Message -ForegroundColor Blue
    Write-Host "================================================`n" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "✓ $Message" -ForegroundColor Green
}

function Write-Warning-Custom {
    param([string]$Message)
    Write-Host "⚠ $Message" -ForegroundColor Yellow
}

# Get script directory and terraform directory
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$TerraformDir = Split-Path -Parent $ScriptDir

# Change to terraform directory
Set-Location $TerraformDir

Write-Header "Retrieving Credentials for: $Environment"

# Select workspace
try {
    terraform workspace select $Environment | Out-Null
    Write-Success "Selected workspace: $Environment"
} catch {
    Write-Host "Error: Workspace '$Environment' not found" -ForegroundColor Red
    Write-Host "Available workspaces:"
    terraform workspace list
    exit 1
}

# Get outputs
Write-Host "`nRetrieving outputs...`n"

try {
    $envVars = terraform output -raw application_env_vars

    if ($LASTEXITCODE -ne 0) {
        throw "Failed to get outputs"
    }

    Write-Header "Environment Variables for .env File"
    Write-Host $envVars
    Write-Host ""

    Write-Warning-Custom "IMPORTANT: These credentials are sensitive!"
    Write-Host "1. Copy the above output to your .env file"
    Write-Host "2. Never commit these credentials to version control"
    Write-Host "3. Rotate credentials regularly for security"
    Write-Host ""

    # Option to save directly to .env
    $saveToEnv = Read-Host "Do you want to append these to ..\.env file? (yes/no)"

    if ($saveToEnv -eq 'yes') {
        $envFilePath = Join-Path -Path (Split-Path -Parent $TerraformDir) -ChildPath ".env"

        # Add separator comment
        Add-Content -Path $envFilePath -Value "`n# AWS Credentials (Generated by Terraform - $Environment - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'))"
        Add-Content -Path $envFilePath -Value $envVars

        Write-Success "Credentials appended to $envFilePath"
    } else {
        Write-Host "Copy the above output manually to your .env file" -ForegroundColor Yellow
    }

} catch {
    Write-Host "Error: Failed to retrieve credentials" -ForegroundColor Red
    Write-Host "Make sure you have run 'terraform apply' first"
    exit 1
}

Write-Host "`n"
Write-Header "Additional Outputs"
terraform output | Out-String | Write-Host

Write-Success "Done!"
